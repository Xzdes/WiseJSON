# =================================================================
# ЭТАП 1: Сборщик (Builder)
# На этом этапе мы устанавливаем все зависимости, включая devDependencies,
# чтобы собрать и подготовить приложение.
# =================================================================
FROM node:18-alpine AS builder

# Устанавливаем рабочую директорию
WORKDIR /usr/src/app

# Копируем package.json и package-lock.json для установки зависимостей
# Этот слой кэшируется, ускоряя сборку, если зависимости не менялись
COPY package*.json ./

# Устанавливаем ВСЕ зависимости, включая devDependencies, если они понадобятся для сборки
RUN npm install

# Копируем весь остальной код проекта
COPY . .

# =================================================================
# ЭТАП 2: Финальный образ (Production)
# Этот этап использует результаты работы сборщика, но создает чистый
# и легковесный образ, оптимизированный для продакшена.
# =================================================================
FROM node:18-alpine

# Создаем группу и пользователя 'node', чтобы не работать под root
RUN addgroup -S node && adduser -S node -G node

# Устанавливаем рабочую директорию
WORKDIR /usr/src/app

# Копируем package.json и package-lock.json
COPY package*.json ./

# Устанавливаем ТОЛЬКО production-зависимости и очищаем кэш npm
RUN npm install --omit=dev --no-color && npm cache clean --force

# Копируем код приложения из этапа 'builder'
COPY --from=builder /usr/src/app .

# Устанавливаем владельцем всех файлов пользователя 'node'
RUN chown -R node:node /usr/src/app

# Переключаемся на non-root пользователя для безопасности
USER node

# Открываем порт, который слушает наше приложение
EXPOSE 3000

# Переменные окружения по умолчанию. Их можно переопределить при запуске.
ENV PORT=3000
ENV WISE_JSON_PATH=/data
ENV LOG_LEVEL=info

# Проверка состояния (healthcheck). Docker будет периодически проверять,
# что приложение не просто запущено, но и отвечает на запросы.
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget -q -O- "http://localhost:3000/api/permissions" || exit 1

# Команда для запуска сервера при старте контейнера
CMD [ "node", "explorer/server.js" ]