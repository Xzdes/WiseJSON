// durability-test-wise-json.js
const WiseJSON = require('wise-json-db');
const path = require('path');
const fs = require('fs/promises');
const assert = require('assert').strict;
const { v4: uuidv4 } = require('uuid');

const TEST_DB_ROOT_DURABILITY = path.join(__dirname, 'test_db_data_durability');

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
let totalTests = 0;
let passedTests = 0;
let failedTests = 0;
const failedTestDetails = [];

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async function describe(title, fn) {
    console.log(`\nüõ°Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π –ë–ª–æ–∫: ${title}`);
    await fn();
}

async function it(title, fn) {
    totalTests++;
    console.log(`  üëâ –¢–µ—Å—Ç: ${title}`);
    await cleanupTestDB(); // –û—á–∏—Å—Ç–∫–∞ –ü–ï–†–ï–î –∫–∞–∂–¥—ã–º 'it' –±–ª–æ–∫–æ–º –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
    try {
        await fn();
        console.log(`    ‚úÖ PASSED`);
        passedTests++;
    } catch (error) {
        console.error(`    ‚ùå FAILED`);
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.error(`       Error: ${errorMessage}`);
        if (error.stack && error instanceof Error && !errorMessage.includes(error.stack.split('\n')[1].trim())) {
            // console.error(`       Stack: ${error.stack}`); 
        }
        failedTests++;
        failedTestDetails.push({ description: title, error: errorMessage, stack: error instanceof Error ? error.stack : null });
    }
}

async function cleanupTestDB() {
    try {
        await fs.rm(TEST_DB_ROOT_DURABILITY, { recursive: true, force: true });
    } catch (error) {
        if (error.code !== 'ENOENT') {
            console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error.message);
        }
    }
}

async function pathExists(filePath) {
    try {
        await fs.access(filePath);
        return true;
    } catch {
        return false;
    }
}

async function readFileContent(filePath) {
    try {
        const content = await fs.readFile(filePath, 'utf-8');
        return JSON.parse(content);
    } catch {
        return null; 
    }
}

function getPaths(collPath, collName, index = 0) {
    const baseName = `${collName}_${index}`;
    return {
        collPath,
        mainP: path.join(collPath, `${baseName}.json`),
        bakP: path.join(collPath, `${baseName}.json.bak`),
        newP: path.join(collPath, `${baseName}.json.new`),
        // tmp —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∏–º–µ—Ç—å uuid, –∏—Ö —Å–ª–æ–∂–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å, –Ω–æ _recoverSegments –∏—Ö –Ω–∞–π–¥–µ—Ç
    };
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async function runDurabilityTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –£–°–ò–õ–ï–ù–ù–´–• —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –ü–†–û–ß–ù–û–°–¢–¨ –∏ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –¥–ª—è WiseJSON...\n');
    
    // ====================================================================================
    // –°—Ü–µ–Ω–∞—Ä–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    // ====================================================================================
    await describe('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', async () => {
        
        await it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (—Å–æ–∑–¥–∞–µ—Ç _0.json)', async () => {
            const db = new WiseJSON(TEST_DB_ROOT_DURABILITY);
            const collName = 'empty_init';
            const coll = await db.collection(collName);
            const paths = getPaths(coll.collectionDirectoryPath, collName);

            assert(await pathExists(paths.collPath), '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
            assert(await pathExists(paths.mainP), `–§–∞–π–ª ${path.basename(paths.mainP)} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω`);
            
            const content = await readFileContent(paths.mainP);
            assert.deepStrictEqual(content, [], `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ ${path.basename(paths.mainP)} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º`);
            
            const data = await coll.getAll();
            assert.strictEqual(data.length, 0, '–ü—É—Å—Ç–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 0 —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        });

        await it('–¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å .json –∏–∑ .bak, –µ—Å–ª–∏ .json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', async () => {
            const dbPath = TEST_DB_ROOT_DURABILITY;
            const collName = 'restore_from_bak_only';
            const collP = path.join(dbPath, collName); // collP - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            await fs.mkdir(collP, { recursive: true });
            const paths = getPaths(collP, collName);

            const bakData = [{ _id: 'id_from_bak', value: 'data_from_bak' }];
            await fs.writeFile(paths.bakP, JSON.stringify(bakData));
            // .json —Ñ–∞–π–ª –ù–ï —Å–æ–∑–¥–∞–µ–º

            const db = new WiseJSON(dbPath);
            const coll = await db.collection(collName); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            
            const data = await coll.getAll();
            assert.strictEqual(data.length, 1, '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ .bak (1 —ç–ª–µ–º–µ–Ω—Ç)');
            assert.deepStrictEqual(data[0], bakData[0], '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å .bak');

            assert(!(await pathExists(paths.bakP)), '.bak —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
            assert(await pathExists(paths.mainP), '.json —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        });

        await it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å .bak, –µ—Å–ª–∏ .json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∞–ª–∏–¥–µ–Ω', async () => {
            const dbPath = TEST_DB_ROOT_DURABILITY;
            const collName = 'delete_bak_if_json_valid';
            const collP = path.join(dbPath, collName);
            await fs.mkdir(collP, { recursive: true });
            const paths = getPaths(collP, collName);

            const jsonData = [{ _id: 'id_json', value: 'data_from_json' }];
            const bakData = [{ _id: 'id_bak_old', value: 'old_bak_data' }];
            await fs.writeFile(paths.mainP, JSON.stringify(jsonData));
            await fs.writeFile(paths.bakP, JSON.stringify(bakData));

            const db = new WiseJSON(dbPath);
            const coll = await db.collection(collName);
            
            const data = await coll.getAll();
            assert.strictEqual(data.length, 1);
            assert.deepStrictEqual(data[0], jsonData[0], '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ .json —Ñ–∞–π–ª–∞');

            assert(!(await pathExists(paths.bakP)), '.bak —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω');
            assert(await pathExists(paths.mainP), '.json —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è');
        });

        await it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π .new —Ñ–∞–π–ª, –µ—Å–ª–∏ .json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–∞–ª–∏–¥–µ–Ω', async () => {
            const dbPath = TEST_DB_ROOT_DURABILITY;
            const collName = 'delete_new_if_json_valid';
            const collP = path.join(dbPath, collName);
            await fs.mkdir(collP, { recursive: true });
            const paths = getPaths(collP, collName);

            const jsonData = [{ _id: 'id_json_main', value: 'main_json_data' }];
            const newData = [{ _id: 'id_new_orphan', value: 'orphan_new_data' }];
            await fs.writeFile(paths.mainP, JSON.stringify(jsonData));
            await fs.writeFile(paths.newP, JSON.stringify(newData));

            const db = new WiseJSON(dbPath);
            const coll = await db.collection(collName);

            const data = await coll.getAll();
            assert.strictEqual(data.length, 1);
            assert.deepStrictEqual(data[0], jsonData[0], '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ .json');

            assert(!(await pathExists(paths.newP)), '.new —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω');
        });

        await it('–¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å .json –∏–∑ .bak –∏ —É–¥–∞–ª–∏—Ç—å .new, –µ—Å–ª–∏ .json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', async () => {
            const dbPath = TEST_DB_ROOT_DURABILITY;
            const collName = 'recover_bak_delete_new';
            const collP = path.join(dbPath, collName);
            await fs.mkdir(collP, { recursive: true });
            const paths = getPaths(collP, collName);

            const bakData = [{ _id: 'id_bak_recover', value: 'bak_is_priority' }];
            const newData = [{ _id: 'id_new_ignored', value: 'new_data_to_delete' }];
            await fs.writeFile(paths.bakP, JSON.stringify(bakData));
            await fs.writeFile(paths.newP, JSON.stringify(newData));

            const db = new WiseJSON(dbPath);
            const coll = await db.collection(collName);

            const data = await coll.getAll();
            assert.strictEqual(data.length, 1, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
            assert.deepStrictEqual(data[0], bakData[0], '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ .bak');

            assert(!(await pathExists(paths.newP)), '.new —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω');
            assert(!(await pathExists(paths.bakP)), '.bak —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω/—É–¥–∞–ª–µ–Ω');
            assert(await pathExists(paths.mainP), '.json —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
        });
    });

    // ====================================================================================
    // –°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ–µ–≤ –≤–æ –≤—Ä–µ–º—è _writeSegmentDataInternal
    // ====================================================================================
    await describe('–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ _writeSegmentDataInternal (—Å–∏–º—É–ª—è—Ü–∏—è —Å–±–æ–µ–≤)', async () => {
        const collName = 'sim_write_fail';
        const initialDoc = { _id: 'initial_id_abc', value: 'initial_value_xyz' };
        const updatedDocContent = [{ _id: 'updated_id_123', value: 'updated_value_789' }];
        let dbInstance; // –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è
        let currentCollPath;
        let paths;

        // –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        async function simulateInitialWrite() {
            dbInstance = new WiseJSON(TEST_DB_ROOT_DURABILITY);
            const tempColl = await dbInstance.collection(collName);
            await tempColl.insert(initialDoc); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            currentCollPath = tempColl.collectionDirectoryPath;
            paths = getPaths(currentCollPath, collName, 0); // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ 0
        }

        await it('–°–±–æ–π –ü–û–°–õ–ï –∑–∞–ø–∏—Å–∏ .new, –î–û —Å–æ–∑–¥–∞–Ω–∏—è .bak (–æ—Å–Ω–æ–≤–Ω–æ–π .json –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è)', async () => {
            await simulateInitialWrite();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º: writeFile –≤ .new —É—Å–ø–µ—à–µ–Ω, –∑–∞—Ç–µ–º "—Å–±–æ–π"
            await fs.writeFile(paths.newP, JSON.stringify(updatedDocContent));
            await new Promise(r => setTimeout(r, 20)); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            const dbRecovered = new WiseJSON(TEST_DB_ROOT_DURABILITY);
            const collRecovered = await dbRecovered.collection(collName);
            const data = await collRecovered.getAll();

            assert.strictEqual(data.length, 1, 'T1: –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è 1 –¥–æ–∫—É–º–µ–Ω—Ç');
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ value, —Ç–∞–∫ –∫–∞–∫ _id –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ insert
            const originalInitialDocInArray = await readFileContent(paths.mainP); // –ß–∏—Ç–∞–µ–º, —á—Ç–æ –±—ã–ª–æ –≤ .json –î–û –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            assert(originalInitialDocInArray && originalInitialDocInArray.length === 1, "T1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π mainP –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1 —ç–ª–µ–º–µ–Ω—Ç");
            assert.strictEqual(data[0].value, originalInitialDocInArray[0].value, 'T1: –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ .json');
            assert(!(await pathExists(paths.newP)), 'T1: .new —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏');
        });

        await it('–°–±–æ–π –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è .bak, –î–û –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è .new –≤ .json (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ .bak)', async () => {
            await simulateInitialWrite();
            const originalInitialDocInArray = await readFileContent(paths.mainP); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

            await fs.writeFile(paths.newP, JSON.stringify(updatedDocContent));
            if (await pathExists(paths.mainP)) await fs.rename(paths.mainP, paths.bakP); // .json —Å—Ç–∞–ª .bak
            await new Promise(r => setTimeout(r, 20));

            const dbRecovered = new WiseJSON(TEST_DB_ROOT_DURABILITY);
            const collRecovered = await dbRecovered.collection(collName);
            const data = await collRecovered.getAll();
            
            assert.strictEqual(data.length, 1, 'T2: –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è 1 –¥–æ–∫—É–º–µ–Ω—Ç');
            assert(originalInitialDocInArray && originalInitialDocInArray.length === 1, "T2: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π mainP (—Ç–µ–ø–µ—Ä—å –≤ .bak) –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1 —ç–ª–µ–º–µ–Ω—Ç");
            assert.strictEqual(data[0].value, originalInitialDocInArray[0].value, 'T2: –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ .bak (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ)');
            assert(!(await pathExists(paths.newP)), 'T2: .new —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω');
            assert(!(await pathExists(paths.bakP)), 'T2: .bak —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ .json');
            assert(await pathExists(paths.mainP), 'T2: .json —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
        });
        
        await it('–°–±–æ–π –ü–û–°–õ–ï –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è .new –≤ .json, –î–û —É–¥–∞–ª–µ–Ω–∏—è .bak (.json –Ω–æ–≤—ã–π, .bak —É–¥–∞–ª—è–µ—Ç—Å—è)', async () => {
            await simulateInitialWrite();

            // –°–∏–º—É–ª–∏—Ä—É–µ–º: .json (—Å—Ç–∞—Ä—ã–π) -> .bak, .new -> .json
            if (await pathExists(paths.mainP)) await fs.rename(paths.mainP, paths.bakP); 
            await fs.writeFile(paths.mainP, JSON.stringify(updatedDocContent)); // –ù–æ–≤—ã–π .json
            // –§–∞–π–ª—ã: paths.mainP (–Ω–æ–≤—ã–π), paths.bakP (—Å—Ç–∞—Ä—ã–π)
            await new Promise(r => setTimeout(r, 20));

            const dbRecovered = new WiseJSON(TEST_DB_ROOT_DURABILITY);
            const collRecovered = await dbRecovered.collection(collName);
            const data = await collRecovered.getAll();

            assert.strictEqual(data.length, 1, 'T3: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –¥–æ–∫—É–º–µ–Ω—Ç');
            assert.deepStrictEqual(data, updatedDocContent, 'T3: –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –Ω–æ–≤–æ–≥–æ .json');
            assert(!(await pathExists(paths.bakP)), 'T3: .bak —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏');
        });

        await it('–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–Ω–µ—Ç .json, .bak, .new –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏)', async () => {
            // cleanupTestDB() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤ `it`
            const dbFirst = new WiseJSON(TEST_DB_ROOT_DURABILITY);
            const collFirst = await dbFirst.collection('first_ever_write');
            const pathsFirst = getPaths(collFirst.collectionDirectoryPath, 'first_ever_write', 0);
            
            const docToInsert = { name: 'My First Document', data: 123 };
            const inserted = await collFirst.insert(docToInsert);
            assert(inserted && inserted._id, 'T4: –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω');

            const data = await collFirst.getAll();
            assert.strictEqual(data.length, 1, 'T4: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –¥–æ–∫—É–º–µ–Ω—Ç');
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª insert, —Ç–∞–∫ –∫–∞–∫ _id, createdAt, updatedAt –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è
            const expectedData = [{ 
                _id: inserted._id, 
                name: docToInsert.name, 
                data: docToInsert.data,
                createdAt: inserted.createdAt,
                updatedAt: inserted.updatedAt
            }];
            assert.deepStrictEqual(data, expectedData, 'T4: –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã');

            assert(await pathExists(pathsFirst.mainP), 'T4: –§–∞–π–ª _0.json –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
            assert(!(await pathExists(pathsFirst.newP)), 'T4: .new –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è');
            assert(!(await pathExists(pathsFirst.bakP)), 'T4: .bak –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è');
        });
    });

    // ====================================================================================
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏—á
    // ====================================================================================
    await describe('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∏—á –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—á–Ω–æ—Å—Ç–∏', async () => {
        await cleanupTestDB(); 
        const featureDb = new WiseJSON(TEST_DB_ROOT_DURABILITY);
        await featureDb.baseDirInitPromise;

        await it('Upsert –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', async () => {
            const upsertColl = await featureDb.collection('upsert_after_all_dur');
            const res1 = await upsertColl.upsert({key: 'upsert1'}, {val: 10}, {setOnInsert: {createdHere:true}});
            assert.strictEqual(res1.operation, 'inserted');
            assert.strictEqual(res1.document.createdHere, true);

            const res2 = await upsertColl.upsert({key: 'upsert1'}, {val: 20});
            assert.strictEqual(res2.operation, 'updated');
            assert.strictEqual(res2.document.val, 20);
            assert.strictEqual(res2.document.createdHere, true);
        });

        await it('–°—á–µ—Ç—á–∏–∫ (count) –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å', async () => {
            const countColl = await featureDb.collection('count_after_all_dur');
            await countColl.insert({tag:'x'});
            await countColl.insert({tag:'x'});
            await countColl.insert({tag:'y'});
            assert.strictEqual(await countColl.count(doc => doc.tag === 'x'), 2);
            assert.strictEqual(await countColl.count(), 3);
        });
        
        await it('–•—É–∫–∏ (hooks) –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å', async () => {
            const hookColl = await featureDb.collection('hooks_after_all_dur');
            let hookFiredData = null;
            hookColl.on('afterInsert', (doc) => { hookFiredData = doc; });
            const insertedByHookTest = await hookColl.insert({label:'hook_trigger'});
            await new Promise(r => setTimeout(r, 50)); 
            assert(hookFiredData, '–•—É–∫ afterInsert –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            assert.strictEqual(hookFiredData._id, insertedByHookTest._id);
            assert.strictEqual(hookFiredData.label, 'hook_trigger');
        });
    });

    // --- –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ ---
    console.log('\n\n--- –ò—Ç–æ–≥–∏ –¢–µ—Å—Ç–æ–≤ –Ω–∞ –ü–†–û–ß–ù–û–°–¢–¨ ---');
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: ${totalTests}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`);

    if (failedTests > 0) {
        console.error('\nüî•üî•üî• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´ –ù–ê –ü–†–û–ß–ù–û–°–¢–¨! üî•üî•üî•');
        failedTestDetails.forEach(fail => {
            console.error(`\n  –û–ø–∏—Å–∞–Ω–∏–µ: ${fail.description}`);
            console.error(`  –û—à–∏–±–∫–∞: ${fail.error}`);
        });
    } else if (totalTests > 0) {
        console.log('\nüéâüéâüéâ –í–°–ï –¢–ï–°–¢–´ –ù–ê –ü–†–û–ß–ù–û–°–¢–¨ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâüéâüéâ');
    } else {
        console.warn("\n‚ö†Ô∏è –ù–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å (–∏–ª–∏ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏).");
    }
}

runDurabilityTests().catch(err => {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ù–ï –¢–ï–°–¢–û–í–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø (–ü–†–û–ß–ù–û–°–¢–¨):", err);
}).finally(() => {
    if (totalTests === 0 && passedTests === 0 && failedTests === 0) { 
        const initialDescribeError = failedTestDetails.find(f => f.description.includes("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WiseJSON"));
        if(initialDescribeError) return;
        console.error("–¢–µ—Å—Ç—ã –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –Ω–∞ —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ.");
    }
});