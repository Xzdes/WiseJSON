// test/server-ready-api.test.js

const path = require('path');
const fs = require('fs');
const assert = require('assert');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ, –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–æ–¥—É–ª—è
const { connect, UniqueConstraintError } = require('../index.js');

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
const TEST_DB_PATH = path.resolve(__dirname, 'server-api-test-db');

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
 */
function cleanup() {
    if (fs.existsSync(TEST_DB_PATH)) {
        fs.rmSync(TEST_DB_PATH, { recursive: true, force: true });
    }
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Ç–µ—Å—Ç–∞ ---
async function runServerReadyApiTest() {
    console.log('=== SERVER-READY API TEST START ===');
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    cleanup();
    let db;

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º "–ª–µ–Ω–∏–≤—É—é" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é. –ù–ï –≤—ã–∑—ã–≤–∞–µ–º db.init()
        console.log('  [1] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DB –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ .init()');
        db = connect(TEST_DB_PATH);
        assert.ok(db, '–≠–∫–∑–µ–º–ø–ª—è—Ä DB –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω');

        // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ getCollection()
        console.log('  [2] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ getCollection()');
        const users = await db.getCollection('users');
        assert.ok(users, '–ö–æ–ª–ª–µ–∫—Ü–∏—è "users" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞');
        assert.strictEqual(await users.count(), 0, '–ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π');

        // 3. –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        console.log('  [3] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π');
        await users.insert({ _id: 'user1', name: 'Alice', email: 'alice@example.com' });
        const alice = await users.getById('user1');
        assert.strictEqual(alice.name, 'Alice', 'getById –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ Alice');
        assert.strictEqual(await users.count(), 1, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1');

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—à–∏–±–∫–∏ UniqueConstraintError
        console.log('  [4] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—à–∏–±–∫–∏ UniqueConstraintError');
        await users.createIndex('email', { unique: true });
        
        await assert.rejects(
            async () => {
                await users.insert({ name: 'Alicia', email: 'alice@example.com' });
            },
            (err) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                assert(err instanceof UniqueConstraintError, '–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∏–ø–∞ UniqueConstraintError');
                assert.strictEqual(err.fieldName, 'email', '–ü–æ–ª–µ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "email"');
                assert.strictEqual(err.value, 'alice@example.com', '–ó–Ω–∞—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "alice@example.com"');
                return true; // –ï—Å–ª–∏ –≤—Å–µ assert –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
            },
            '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–∞ –æ—à–∏–±–∫–∞ UniqueConstraintError –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ email'
        );
        console.log('  --- UniqueConstraintError —É—Å–ø–µ—à–Ω–æ –ø–æ–π–º–∞–Ω–∞');

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
        console.log('  [5] –†–∞–±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏');
        const logs = await db.getCollection('logs');
        await logs.insert({ event: 'user_created', userId: 'user1' });
        assert.strictEqual(await logs.count(), 1, '–ö–æ–ª–ª–µ–∫—Ü–∏—è –ª–æ–≥–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1 –∑–∞–ø–∏—Å—å');

        const collectionNames = await db.getCollectionNames();
        assert.deepStrictEqual(collectionNames.sort(), ['logs', 'users'].sort(), 'getCollectionNames –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫');

    } finally {
        // 6. –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ë–î –∏ –æ—á–∏—Å—Ç–∫–∞
        console.log('  [6] –ó–∞–∫—Ä—ã—Ç–∏–µ –ë–î –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
        if (db) {
            await db.close();
        }
        cleanup();
        console.log('  --- –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    console.log('\n‚úÖ === SERVER-READY API TEST PASSED SUCCESSFULLY ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runServerReadyApiTest().catch(err => {
    console.error('\nüî• === TEST FAILED ===');
    console.error(err);
    // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    cleanup();
    process.exit(1);
});