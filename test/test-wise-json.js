// test-wise-json.js
const WiseJSON = require('wise-json-db'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–∞–∫–µ—Ç–∞
const path = require('path');
const fs = require('fs/promises');
const { v4: uuidv4 } = require('uuid'); // <-- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£

const TEST_DB_ROOT = path.join(__dirname, 'test_db_data_simple'); // –ù–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ---
let testCounter = 0;
let assertionsPassed = 0;
let assertionsFailed = 0;

async function assert(condition, message) {
    testCounter++;
    if (condition) {
        console.log(`‚úÖ PASSED: ${message}`);
        assertionsPassed++;
    } else {
        console.error(`‚ùå FAILED: ${message}`);
        assertionsFailed++;
    }
}

async function cleanupTestDB() {
    try {
        await fs.rm(TEST_DB_ROOT, { recursive: true, force: true });
    } catch (error) {
        if (error.code !== 'ENOENT') {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç):', error);
        }
    }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ ---
async function runSimpleTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ü–†–û–°–¢–´–• —Ç–µ—Å—Ç–æ–≤ –¥–ª—è WiseJSON...\n');
    await cleanupTestDB();

    let db;

    // --- –¢–µ—Å—Ç—ã –¥–ª—è WiseJSON (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å) ---
    console.log('\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WiseJSON (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å) ---');
    try {
        db = new WiseJSON(TEST_DB_ROOT);
        await db.baseDirInitPromise;
        await assert(true, 'WiseJSON: –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
    } catch (e) {
        await assert(false, `WiseJSON: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}`);
        console.error(e);
        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∏ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å
        console.log('\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¢–µ—Å—Ç–æ–≤ ---');
        console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${testCounter}`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${assertionsPassed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${assertionsFailed > 0 ? assertionsFailed : 1}`);
        return;
    }

   try {
        const productsCollection = await db.collection('products_simple');
        await assert(
            typeof productsCollection === 'object' && productsCollection !== null && typeof productsCollection.insert === 'function', 
            'WiseJSON: collection() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –º–µ—Ç–æ–¥–æ–º insert'
        );
        
        const productsCollectionAgain = await db.collection('products_simple');
        await assert(productsCollection === productsCollectionAgain, 'WiseJSON: collection() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä');

        try {
            await fs.access(path.join(TEST_DB_ROOT, 'products_simple'));
            await assert(true, 'WiseJSON: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "products_simple" —Å–æ–∑–¥–∞–Ω–∞');
        } catch (e) {
            await assert(false, `WiseJSON: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "products_simple" –ù–ï —Å–æ–∑–¥–∞–Ω–∞: ${e.message}`);
        }

    } catch (e) {
        await assert(false, `WiseJSON: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–µ—Ç–æ–¥–æ–º collection(): ${e.message}`);
        console.error(e);
    }

    // --- –¢–µ—Å—Ç—ã –¥–ª—è Collection ---
    console.log('\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Collection (–±–∞–∑–æ–≤—ã–π CRUD) ---');
    if (!db || assertionsFailed > 0) { // –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
        console.error("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ Collection –∏–∑-–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫.");
        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∏ –≤—ã—Ö–æ–¥–∏–º
        console.log('\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¢–µ—Å—Ç–æ–≤ ---');
        console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${testCounter}`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${assertionsPassed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${assertionsFailed}`);
        return;
    }


    const itemsCollection = await db.collection('items_simple', { maxSegmentSizeBytes: 150, jsonIndent: 0 });
    let item1, item2;

    // 1. –¢–µ—Å—Ç insert()
    try {
        const data1 = { name: '–ü—Ä–æ—Å—Ç–æ–π –ü—Ä–µ–¥–º–µ—Ç 1', value: 10 };
        item1 = await itemsCollection.insert(data1);
        await assert(item1 && item1._id && item1.name === data1.name && item1.value === data1.value, 
                     'Collection.insert(): –£—Å–ø–µ—à–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');

        const data2 = { name: '–ü—Ä–æ—Å—Ç–æ–π –ü—Ä–µ–¥–º–µ—Ç 2', value: 20, tags: ['test', 'basic'] };
        item2 = await itemsCollection.insert(data2);
        await assert(item2 && item2._id && item2.name === data2.name && item2.tags && item2.tags.includes('basic'), 
                     'Collection.insert(): –£—Å–ø–µ—à–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –¥–æ–ø. –ø–æ–ª—è–º–∏');
    } catch (e) {
        await assert(false, `Collection.insert(): –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ: ${e.message}`);
        console.error(e);
    }
    
    // 2. –¢–µ—Å—Ç getById()
    if (item1 && item1._id) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ item1 –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
        try {
            const foundItem1 = await itemsCollection.getById(item1._id);
            await assert(foundItem1 && foundItem1.name === item1.name, 'Collection.getById(): –£—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');
            
            const notFoundItem = await itemsCollection.getById('non-existent-id-simple');
            await assert(notFoundItem === null, 'Collection.getById(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID');
        } catch (e) {
            await assert(false, `Collection.getById(): –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${e.message}`);
            console.error(e);
        }
    } else {
        await assert(false, 'Collection.getById(): –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, item1 –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.');
    }

    // 3. –¢–µ—Å—Ç getAll()
    try {
        const allItems = await itemsCollection.getAll();
        // –û–∂–∏–¥–∞–µ–º 2 —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–±–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã
        const expectedCount = (item1 && item1._id ? 1 : 0) + (item2 && item2._id ? 1 : 0);
        await assert(Array.isArray(allItems) && allItems.length === expectedCount, 
                     `Collection.getAll(): –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ${expectedCount} –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–ª—É—á–µ–Ω–æ: ${allItems.length}`);
    } catch (e) {
        await assert(false, `Collection.getAll(): –û—à–∏–±–∫–∞: ${e.message}`);
        console.error(e);
    }

    // 4. –¢–µ—Å—Ç find() –∏ findOne()
    if (item1 && item1._id && item2 && item2._id) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        try {
            const itemsWithValue10 = await itemsCollection.find(item => item.value === 10);
            await assert(itemsWithValue10.length === 1 && itemsWithValue10[0].name === item1.name, 'Collection.find(): –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é');

            const itemWithTagBasic = await itemsCollection.findOne(item => item.tags && item.tags.includes('basic'));
            await assert(itemWithTagBasic && itemWithTagBasic.name === item2.name, 'Collection.findOne(): –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É');
            
            const nonExistentFind = await itemsCollection.findOne(item => item.value === 9999);
            await assert(nonExistentFind === null, 'Collection.findOne(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        } catch (e) {
            await assert(false, `Collection.find()/findOne(): –û—à–∏–±–∫–∞: ${e.message}`);
            console.error(e);
        }
    } else {
         await assert(false, 'Collection.find()/findOne(): –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –Ω–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã.');
    }

    // 5. –¢–µ—Å—Ç update()
    if (item2 && item2._id) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ item2 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try {
            const originalUpdatedAt = item2.updatedAt;
            const updatedItem2 = await itemsCollection.update(item2._id, { value: 25, status: 'updated_simple' });
            await assert(updatedItem2 && updatedItem2.value === 25 && updatedItem2.status === 'updated_simple', 'Collection.update(): –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            await assert(updatedItem2.updatedAt !== originalUpdatedAt, 'Collection.update(): –ü–æ–ª–µ updatedAt –æ–±–Ω–æ–≤–ª–µ–Ω–æ');

            const fetchedUpdatedItem2 = await itemsCollection.getById(item2._id);
            await assert(fetchedUpdatedItem2 && fetchedUpdatedItem2.value === 25, 'Collection.update(): –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            
            const nonExistentUpdate = await itemsCollection.update('non-existent-id-simple-update', { value: 1 });
            await assert(nonExistentUpdate === null, 'Collection.update(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID');
        } catch (e) {
            await assert(false, `Collection.update(): –û—à–∏–±–∫–∞: ${e.message}`);
            console.error(e);
        }
    } else {
        await assert(false, 'Collection.update(): –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, item2 –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.');
    }

    // 6. –¢–µ—Å—Ç remove()
    if (item1 && item1._id && item2 && item2._id) { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        try {
            const wasRemoved1 = await itemsCollection.remove(item1._id);
            await assert(wasRemoved1 === true, 'Collection.remove(): –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ item1');

            const removedItem1Check = await itemsCollection.getById(item1._id);
            await assert(removedItem1Check === null, 'Collection.remove(): –£–¥–∞–ª–µ–Ω–Ω—ã–π item1 –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è');

            const allItemsAfterRemove = await itemsCollection.getAll();
            // –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ item2 (–µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Å—Ç–µ - –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å)
            // –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞, –º—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—Å—è item2
            const item2StillExists = allItemsAfterRemove.find(i => i._id === item2._id);
            await assert(allItemsAfterRemove.length === 1 && item2StillExists, 
                         `Collection.remove(): getAll() –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 1 —ç–ª–µ–º–µ–Ω—Ç (item2). –ù–∞–π–¥–µ–Ω–æ: ${allItemsAfterRemove.length}`);
            
            const nonExistentRemove = await itemsCollection.remove('non-existent-id-simple-remove');
            await assert(nonExistentRemove === false, 'Collection.remove(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç false –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID');

        } catch (e) {
            await assert(false, `Collection.remove(): –û—à–∏–±–∫–∞: ${e.message}`);
            console.error(e);
        }
    } else {
         await assert(false, 'Collection.remove(): –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –Ω–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã/–æ—Å—Ç–∞–ª–∏—Å—å.');
    }
    
    // 7. –¢–µ—Å—Ç –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤—Å—Ç–∞–≤–æ–∫)
    console.log('\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç) ---');
    // –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const segmentTestCollection = await db.collection('segment_simple_verify', { maxSegmentSizeBytes: 100, jsonIndent: 0 }); 
    let totalItemsForSegmentTest = 0;
    const itemsToVerifyInSegments = [];

    try {
        for (let i = 0; i < 5; i++) { // 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —Ç–æ—á–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ max 100 –±–∞–π—Ç
            const newItem = await segmentTestCollection.insert({ 
                name: `–°–µ–≥–º–µ–Ω—Ç –≠–ª–µ–º–µ–Ω—Ç ${i}`, 
                data: `–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ${uuidv4()}` // uuid –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞
            });
            assert(newItem && newItem._id, `–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –í—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i} —É—Å–ø–µ—à–Ω–∞`);
            itemsToVerifyInSegments.push(newItem);
            totalItemsForSegmentTest++;
        }
        
        const allSegmentedItems = await segmentTestCollection.getAll();
        await assert(allSegmentedItems.length === totalItemsForSegmentTest, 
            `–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: getAll() –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ ${totalItemsForSegmentTest} –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–æ–ª—É—á–µ–Ω–æ: ${allSegmentedItems.length}`);

        for (const insertedItem of itemsToVerifyInSegments) {
            const found = allSegmentedItems.find(item => item._id === insertedItem._id);
            await assert(found && found.name === insertedItem.name, 
                         `–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –≠–ª–µ–º–µ–Ω—Ç ${insertedItem._id} (${insertedItem.name}) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.`);
        }
    } catch (e) {
        await assert(false, `–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –û—à–∏–±–∫–∞: ${e.message}`);
        console.error(e);
    }

    // 8. –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø–∏—Å–∏ (–ø—Ä–æ—Å—Ç–æ–π)
    console.log('\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –û—á–µ—Ä–µ–¥–∏ –ó–∞–ø–∏—Å–∏ (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç) ---');
    const raceCollection = await db.collection('race_items_simple');
    try {
        const promises = [];
        const numInserts = 10; // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º
        for (let i = 0; i < numInserts; i++) {
            promises.push(raceCollection.insert({ name: `–ì–æ–Ω–∫–∞ ${i}`, order: i }));
        }
        const results = await Promise.allSettled(promises);
        
        let successfulInserts = 0;
        results.forEach(result => {
            if (result.status === 'fulfilled' && result.value && result.value._id) {
                successfulInserts++;
            } else if (result.status === 'rejected') {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–µ (–æ—á–µ—Ä–µ–¥—å):", result.reason);
            }
        });
        await assert(successfulInserts === numInserts, `–û—á–µ—Ä–µ–¥—å –ó–∞–ø–∏—Å–∏: –í—Å–µ ${numInserts} –≤—Å—Ç–∞–≤–æ–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏. –£—Å–ø–µ—à–Ω–æ: ${successfulInserts}`);
        
        const raceItems = await raceCollection.getAll();
        await assert(raceItems.length === numInserts, `–û—á–µ—Ä–µ–¥—å –ó–∞–ø–∏—Å–∏: –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ${numInserts}. –ù–∞–π–¥–µ–Ω–æ: ${raceItems.length}`);
        
    } catch (e) {
        await assert(false, `–û—á–µ—Ä–µ–¥—å –ó–∞–ø–∏—Å–∏: –û—à–∏–±–∫–∞: ${e.message}`);
        console.error(e);
    }

    // --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ ---
    console.log('\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¢–µ—Å—Ç–æ–≤ ---');
    console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${testCounter}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${assertionsPassed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${assertionsFailed}`);

    if (assertionsFailed > 0) {
        console.error('\nüî•üî•üî• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´! üî•üî•üî•');
    } else {
        console.log('\nüéâüéâüéâ –í–°–ï –ü–†–û–°–¢–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâüéâüéâ');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runSimpleTests().catch(err => {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤:", err);
    // process.exit(1); // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è CI
});