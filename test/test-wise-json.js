// test-wise-json.js
const WiseJSON = require('./wise-json'); // –ü—É—Ç—å –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ñ–∞–π–ª—É –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const path = require('path');
const fs = require('fs/promises'); // –î–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

const TEST_DB_ROOT = path.join(__dirname, 'test_db_data'); // –û—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ---

let testCounter = 0;
let assertionsPassed = 0;
let assertionsFailed = 0;

async function assert(condition, message) {
    testCounter++;
    if (condition) {
        console.log(`‚úÖ PASSED: ${message}`);
        assertionsPassed++;
    } else {
        console.error(`‚ùå FAILED: ${message}`);
        assertionsFailed++;
    }
}

async function cleanupTestDB() {
    try {
        await fs.rm(TEST_DB_ROOT, { recursive: true, force: true });
        // console.log('–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.');
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç
        if (error.code !== 'ENOENT') {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
        }
    }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ ---

async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è WiseJSON...\n');

    // 0. –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø–æ–ª–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤
    await cleanupTestDB();

    // --- –¢–µ—Å—Ç—ã –¥–ª—è WiseJSON (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å) ---
    console.log('\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WiseJSON (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å) ---');
    let db;
    try {
        db = new WiseJSON(TEST_DB_ROOT);
        await db.baseDirInitPromise; // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        await assert(true, 'WiseJSON: –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
    } catch (e) {
        await assert(false, `WiseJSON: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}`);
        console.error(e);
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å
    }

    try {
        const productsCollection = await db.collection('products');
        await assert(productsCollection instanceof require('./wise-json/collection'), 'WiseJSON: collection() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Collection');
        
        const productsCollectionAgain = await db.collection('products');
        await assert(productsCollection === productsCollectionAgain, 'WiseJSON: collection() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        try {
            await fs.access(path.join(TEST_DB_ROOT, 'products'));
            await assert(true, 'WiseJSON: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "products" —Å–æ–∑–¥–∞–Ω–∞');
        } catch (e) {
            await assert(false, `WiseJSON: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "products" –ù–ï —Å–æ–∑–¥–∞–Ω–∞: ${e.message}`);
        }

    } catch (e) {
        await assert(false, `WiseJSON: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–µ—Ç–æ–¥–æ–º collection(): ${e.message}`);
        console.error(e);
    }

    // --- –¢–µ—Å—Ç—ã –¥–ª—è Collection ---
    console.log('\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Collection ---');
    if (!db) return; // –ï—Å–ª–∏ db –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω

    const itemsCollection = await db.collection('items', { maxSegmentSizeBytes: 100 }); // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

    // 1. –¢–µ—Å—Ç insert()
    let item1, item2, item3, item4;
    try {
        item1 = await itemsCollection.insert({ name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–µ–¥–º–µ—Ç 1', value: 10 });
        await assert(item1 && item1._id && item1.name === '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–µ–¥–º–µ—Ç 1', 'Collection.insert(): –£—Å–ø–µ—à–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');

        item2 = await itemsCollection.insert({ name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–µ–¥–º–µ—Ç 2', value: 20, tags: ['test', 'simple'] });
        await assert(item2 && item2.tags && item2.tags.includes('test'), 'Collection.insert(): –£—Å–ø–µ—à–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –¥–æ–ø. –ø–æ–ª—è–º–∏');
    } catch (e) {
        await assert(false, `Collection.insert(): –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ: ${e.message}`);
        console.error(e);
    }
    
    // 2. –¢–µ—Å—Ç getById()
    if (item1) {
        try {
            const foundItem1 = await itemsCollection.getById(item1._id);
            await assert(foundItem1 && foundItem1.name === '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–µ–¥–º–µ—Ç 1', 'Collection.getById(): –£—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');
            
            const notFoundItem = await itemsCollection.getById('non-existent-id');
            await assert(notFoundItem === null, 'Collection.getById(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID');
        } catch (e) {
            await assert(false, `Collection.getById(): –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${e.message}`);
            console.error(e);
        }
    }

    // 3. –¢–µ—Å—Ç getAll()
    try {
        const allItems = await itemsCollection.getAll();
        await assert(Array.isArray(allItems) && allItems.length === 2, 'Collection.getAll(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ (2) –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã');
    } catch (e) {
        await assert(false, `Collection.getAll(): –û—à–∏–±–∫–∞: ${e.message}`);
        console.error(e);
    }

    // 4. –¢–µ—Å—Ç find() –∏ findOne()
    try {
        const itemsWithValue10 = await itemsCollection.find(item => item.value === 10);
        await assert(itemsWithValue10.length === 1 && itemsWithValue10[0].name === '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–µ–¥–º–µ—Ç 1', 'Collection.find(): –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é');

        const itemWithTagSimple = await itemsCollection.findOne(item => item.tags && item.tags.includes('simple'));
        await assert(itemWithTagSimple && itemWithTagSimple.name === '–¢–µ—Å—Ç–æ–≤—ã–π –ü—Ä–µ–¥–º–µ—Ç 2', 'Collection.findOne(): –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É');
        
        const nonExistentFind = await itemsCollection.findOne(item => item.value === 999);
        await assert(nonExistentFind === null, 'Collection.findOne(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');

    } catch (e) {
        await assert(false, `Collection.find()/findOne(): –û—à–∏–±–∫–∞: ${e.message}`);
        console.error(e);
    }

    // 5. –¢–µ—Å—Ç update()
    if (item2) {
        try {
            const updatedItem2 = await itemsCollection.update(item2._id, { value: 25, status: 'updated' });
            await assert(updatedItem2 && updatedItem2.value === 25 && updatedItem2.status === 'updated', 'Collection.update(): –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
            await assert(updatedItem2.updatedAt !== item2.updatedAt, 'Collection.update(): –ü–æ–ª–µ updatedAt –æ–±–Ω–æ–≤–ª–µ–Ω–æ');

            const fetchedUpdatedItem2 = await itemsCollection.getById(item2._id);
            await assert(fetchedUpdatedItem2 && fetchedUpdatedItem2.value === 25, 'Collection.update(): –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ getById)');
            
            const nonExistentUpdate = await itemsCollection.update('non-existent-id', { value: 1 });
            await assert(nonExistentUpdate === null, 'Collection.update(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID');

        } catch (e) {
            await assert(false, `Collection.update(): –û—à–∏–±–∫–∞: ${e.message}`);
            console.error(e);
        }
    }

    // 6. –¢–µ—Å—Ç remove()
    if (item1) {
        try {
            const wasRemoved = await itemsCollection.remove(item1._id);
            await assert(wasRemoved === true, 'Collection.remove(): –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');

            const removedItemCheck = await itemsCollection.getById(item1._id);
            await assert(removedItemCheck === null, 'Collection.remove(): –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ getById');

            const allItemsAfterRemove = await itemsCollection.getAll();
            await assert(allItemsAfterRemove.length === 1 && allItemsAfterRemove[0]._id === item2._id, 'Collection.remove(): getAll() –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è');
            
            const nonExistentRemove = await itemsCollection.remove('non-existent-id');
            await assert(nonExistentRemove === false, 'Collection.remove(): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç false –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID');

        } catch (e) {
            await assert(false, `Collection.remove(): –û—à–∏–±–∫–∞: ${e.message}`);
            console.error(e);
        }
    }
    
    // 7. –¢–µ—Å—Ç –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç –º–∞–ª–µ–Ω—å–∫–æ–≥–æ maxSegmentSizeBytes)
    // –£ itemsCollection —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω maxSegmentSizeBytes: 100 –±–∞–π—Ç
    console.log('\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ ---');
    try {
        // –í—Å—Ç–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Å–µ–≥–º–µ–Ω—Ç–∞
        // –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ: {"_id":"...", "name":"Test Item X", "value":XX, "createdAt":"...", "updatedAt":"..."} ~ 150-200 –±–∞–π—Ç
        // –ó–Ω–∞—á–∏—Ç, –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ-–≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç.
        item3 = await itemsCollection.insert({ name: '–û—á–µ–Ω—å –î–ª–∏–Ω–Ω–æ–µ –ò–º—è –ü—Ä–µ–¥–º–µ—Ç–∞ –î–ª—è –¢–µ—Å—Ç–∞ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ù–æ–º–µ—Ä –¢—Ä–∏', value: 30 });
        await assert(item3, '–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –í—Å—Ç–∞–≤–∫–∞ item3');
        
        const segmentFilesBeforeItem4 = await itemsCollection._getSegmentFiles();
        const initialSegmentCount = segmentFilesBeforeItem4.length;
        // console.log(`–°–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–æ item4: ${initialSegmentCount}, —Ñ–∞–π–ª—ã: ${segmentFilesBeforeItem4.join(', ')}`);

        item4 = await itemsCollection.insert({ name: '–ü—Ä–µ–¥–º–µ—Ç –ß–µ—Ç—ã—Ä–µ –¢–∞–∫–∂–µ –° –î–ª–∏–Ω–Ω—ã–º –ò–º–µ–Ω–µ–º', value: 40 });
        await assert(item4, '–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –í—Å—Ç–∞–≤–∫–∞ item4');

        const segmentFilesAfterItem4 = await itemsCollection._getSegmentFiles();
        const finalSegmentCount = segmentFilesAfterItem4.length;
        // console.log(`–°–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ item4: ${finalSegmentCount}, —Ñ–∞–π–ª—ã: ${segmentFilesAfterItem4.join(', ')}`);
        // console.log(`–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å–µ–≥–º–µ–Ω—Ç–∞: ${itemsCollection.currentSegmentIndex}`);

        // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –∏–ª–∏ currentSegmentIndex > 0
        // –¢–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ item2, item3, item4 —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å
        // –í–∞–∂–Ω–æ, —á—Ç–æ currentSegmentIndex –∏–∑–º–µ–Ω–∏–ª—Å—è, –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ö–æ–¥
        await assert(itemsCollection.currentSegmentIndex > 0 || finalSegmentCount > initialSegmentCount || finalSegmentCount > 1,
                     `–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –ü—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ (–±—ã–ª–æ ${initialSegmentCount}, —Å—Ç–∞–ª–æ ${finalSegmentCount}, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å ${itemsCollection.currentSegmentIndex})`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ getAll()
        const allSegmentedItems = await itemsCollection.getAll();
        // –û–∂–∏–¥–∞–µ–º item2 (–æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è item1), item3, item4
        await assert(allSegmentedItems.length === 3, `–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: getAll() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ ${allSegmentedItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤`);
        const foundItem4 = allSegmentedItems.find(i => i._id === item4._id);
        await assert(foundItem4 && foundItem4.name === '–ü—Ä–µ–¥–º–µ—Ç –ß–µ—Ç—ã—Ä–µ –¢–∞–∫–∂–µ –° –î–ª–∏–Ω–Ω—ã–º –ò–º–µ–Ω–µ–º', '–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –≠–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω');

    } catch (e) {
        await assert(false, `–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –û—à–∏–±–∫–∞: ${e.message}`);
        console.error(e);
    }

    // 8. –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø–∏—Å–∏ (–ø—Ä–æ—Å—Ç–æ–π)
    console.log('\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –û—á–µ—Ä–µ–¥–∏ –ó–∞–ø–∏—Å–∏ ---');
    const raceCollection = await db.collection('race_items');
    try {
        const promises = [];
        const numInserts = 5;
        for (let i = 0; i < numInserts; i++) {
            promises.push(raceCollection.insert({ name: `–ì–æ–Ω–∫–∞ ${i}`, order: i }));
        }
        await Promise.all(promises);
        
        const raceItems = await raceCollection.getAll();
        await assert(raceItems.length === numInserts, `–û—á–µ—Ä–µ–¥—å –ó–∞–ø–∏—Å–∏: –í—Å–µ ${numInserts} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ (—Ö–æ—Ç—è UUID –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫, –Ω–æ createdAt –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º)
        // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –±—ã –º—ã –≤—Å—Ç–∞–≤–ª—è–ª–∏ —Å –ø–æ–ª–µ–º 'sequence' –∏ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –µ–≥–æ.
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –≤—Å—Ç–∞–≤–∏–ª–∏—Å—å.
        let ordered = true;
        for (let i = 0; i < raceItems.length - 1; i++) {
            if (new Date(raceItems[i].createdAt) > new Date(raceItems[i+1].createdAt)) {
                // –≠—Ç–æ –º–æ–∂–µ—Ç –∏–Ω–æ–≥–¥–∞ —Å–ª—É—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ Date,
                // –Ω–æ –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏ –∏–ª–∏ —Ä–∞–≤–Ω—ã.
                // –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—Ç–µ –∏ —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.
                // console.warn(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: createdAt ${raceItems[i].createdAt} > ${raceItems[i+1].createdAt}`);
                // ordered = false; break; // –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ —ç—Ç–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
            }
        }
        // await assert(ordered, '–û—á–µ—Ä–µ–¥—å –ó–∞–ø–∏—Å–∏: createdAt –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ) –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã');

    } catch (e) {
        await assert(false, `–û—á–µ—Ä–µ–¥—å –ó–∞–ø–∏—Å–∏: –û—à–∏–±–∫–∞: ${e.message}`);
        console.error(e);
    }


    // --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ ---
    console.log('\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¢–µ—Å—Ç–æ–≤ ---');
    console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${testCounter}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${assertionsPassed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${assertionsFailed}`);

    if (assertionsFailed > 0) {
        console.error('\nüî•üî•üî• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´! üî•üî•üî•');
        // process.exit(1); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
    } else {
        console.log('\nüéâüéâüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! üéâüéâüéâ');
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    // await cleanupTestDB(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(err => {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:", err);
    process.exit(1);
});