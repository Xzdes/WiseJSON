// test/extreme-stress-wise-json.js

const fs = require('fs/promises');
const path = require('path');
const assert = require('assert');
const WiseJSON = require('../wise-json/index.js');

const TEST_DB_PATH = path.join(__dirname, 'extreme-stress-db');
const USERS = 10000;
const BATCH = 5000;
const TTL_SEC = 2;

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function runExtremeTest() {
    console.log('\nüöÄ [EXTREME TEST] –°—Ç–∞—Ä—Ç —Å—É–ø–µ—Ä–Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ WiseJSON...\n');
    await fs.rm(TEST_DB_PATH, { recursive: true, force: true }).catch(() => {});

    const db = new WiseJSON(TEST_DB_PATH, { checkpointIntervalMs: 200, walSync: true });
    await db.init();
    const users = await db.collection('users');
    const logs = await db.collection('logs');
    await users.initPromise;
    await logs.initPromise;

    // 1. –ú–∞—Å—Å–æ–≤—ã–π insert –ø–æ –æ–¥–Ω–æ–º—É
    console.time('insert');
    for (let i = 0; i < USERS; ++i) {
        await users.insert({ name: `User${i}`, email: `u${i}@test.com` });
        if (i > 0 && i % 1000 === 0) console.log(`insert: ${i}`);
    }
    console.timeEnd('insert');

    // 2. Batch insert
    console.time('batch');
    const batch = [];
    for (let i = 0; i < BATCH; ++i) {
        batch.push({ name: `Batch${i}`, email: `b${i}@test.com`, testField: i % 2 });
    }
    await users.insertMany(batch);
    console.timeEnd('batch');
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ batch: ${(await users.count())}`);

    // 3. TTL —Ç–µ—Å—Ç: batch —Å TTL
    const batchTTL = [];
    for (let i = 0; i < 100; ++i) {
        batchTTL.push({ name: `TTL${i}`, email: `ttl${i}@test.com`, expireAt: Date.now() + TTL_SEC * 1000 });
    }
    await users.insertMany(batchTTL);
    console.log('Batch TTL-insert OK');
    await sleep((TTL_SEC + 1) * 1000); // –∂–¥—ë–º –ø–æ–∫–∞ –∏—Å—Ç–µ—á—ë—Ç TTL
    const aliveTTL = (await users.find(u => u.name.startsWith('TTL'))).length;
    console.log(`TTL alive: ${aliveTTL}`);
    assert(aliveTTL === 0, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è—é—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –∏—Å—Ç—ë–∫—à–∏–º TTL!');

    // 4. –ò–Ω–¥–µ–∫—Å—ã
    await users.createIndex('email', { unique: true });
    await users.createIndex('testField');
    const found = await users.findOneByIndexedValue('email', 'u9999@test.com');
    assert(found, '–ò–Ω–¥–µ–∫—Å –ø–æ email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('–ò–Ω–¥–µ–∫—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç');

    // 5. Update + –º–∞—Å—Å–æ–≤—ã–π update
    for (let i = 0; i < 10; ++i) {
        await users.update(found._id, { flag: true });
    }
    const batchIds = (await users.findByIndexedValue('testField', 1)).map(u => u._id);
    for (const id of batchIds.slice(0, 1000)) {
        await users.update(id, { updated: true });
    }
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏—è OK');

    // 6. Remove, batch remove
    for (const id of batchIds.slice(0, 100)) {
        await users.remove(id);
    }
    console.log('–£–¥–∞–ª–µ–Ω–∏—è OK');

    // 7. –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
    const allUsers = await users.getAll();
    const exportFile = path.join(TEST_DB_PATH, 'users-export.json');
    await fs.writeFile(exportFile, JSON.stringify(allUsers, null, 2), 'utf8');
    await users.clear();
    const imported = JSON.parse(await fs.readFile(exportFile, 'utf8'));
    await users.insertMany(imported);
    assert((await users.count()) === allUsers.length, '–ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
    console.log('–≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç OK');

    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ stats
    const stats = await users.stats();
    console.log('Stats:', stats);

    // 9. –õ–æ–≥–∏, –≤—Ç–æ—Ä–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è, batch
    for (let i = 0; i < 500; ++i) {
        await logs.insert({ event: 'login', user: `u${i}@test.com` });
    }
    assert((await logs.count()) === 500, '–õ–æ–≥–∏ –Ω–µ –ø–∏—à—É—Ç—Å—è');
    await logs.clear();
    console.log('–ö–æ–ª–ª–µ–∫—Ü–∏—è logs —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // 10. Recovery WAL
    await users.insert({ name: 'CRASH_USER', email: 'crash@test.com' });
    await db.close();
    console.log('--- [Crash/recovery] –ó–∞–∫—Ä—ã–ª–∏ –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é');

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
    const db2 = new WiseJSON(TEST_DB_PATH);
    await db2.init();
    const users2 = await db2.collection('users');
    await users2.initPromise;
    const logs2 = await db2.collection('logs');
    await logs2.initPromise;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CRASH_USER –µ—Å—Ç—å (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ WAL + –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è)
    const recovered = await users2.findOneByIndexedValue('email', 'crash@test.com');
    assert(recovered, 'Recovery –∏–∑ WAL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª!');
    console.log('Recovery WAL OK');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ/–æ—á–∏—Å—Ç–∫—É
    await users2.clear();
    assert((await users2.count()) === 0, 'Clear –Ω–µ —É–¥–∞–ª–∏–ª –≤—Å–µ—Ö!');
    await db2.close();

    console.log('\n‚úÖ EXTREME STRESS TEST PASSED\n');
}

runExtremeTest().catch(e => {
    console.error('\nüî• [CRITICAL ERROR IN EXTREME TEST]\n', e);
    process.exit(1);
});
