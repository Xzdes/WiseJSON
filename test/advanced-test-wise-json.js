// advanced-test-wise-json.js
const WiseJSON = require('wise-json-db');
const path = require('path');
const fs = require('fs/promises');
const assert = require('assert').strict;
const { v4: uuidv4 } = require('uuid');

const TEST_DB_ROOT_ADVANCED = path.join(__dirname, 'test_db_data_advanced');

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
let totalTests = 0;
let passedTests = 0;
let failedTests = 0;
const failedTestDetails = [];

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ ---
async function describe(description, fn) {
    console.log(`\nüß™ –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
    await fn();
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ ---
async function it(description, fn) {
    totalTests++;
    try {
        await fn();
        console.log(`  ‚úÖ PASSED: ${description}`);
        passedTests++;
    } catch (error) {
        console.error(`  ‚ùå FAILED: ${description}`);
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.error(`     Error: ${errorMessage}`);
        if (error.stack && error instanceof Error) {
            // console.error(`     Stack: ${error.stack.split('\n').slice(1).join('\n')}`);
        }
        failedTests++;
        failedTestDetails.push({ description, error: errorMessage, stack: error instanceof Error ? error.stack : null });
    }
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ---
async function cleanupTestDB() {
    try {
        await fs.rm(TEST_DB_ROOT_ADVANCED, { recursive: true, force: true });
    } catch (error) {
        if (error.code !== 'ENOENT') {
            console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error.message);
        }
    }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async function runAdvancedTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ë–û–ï–í–´–• —Ç–µ—Å—Ç–æ–≤ –¥–ª—è WiseJSON (—Ñ–æ–∫—É—Å –Ω–∞ UPSERT)...\n');
    await cleanupTestDB(); 

    let db;

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DB –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏ upsert
    console.log('\nüß™ –û–ø–∏—Å–∞–Ω–∏–µ: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WiseJSON –¥–ª—è —Ç–µ—Å—Ç–æ–≤ UPSERT');
    await it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WiseJSON –∏ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', async () => {
        db = new WiseJSON(TEST_DB_ROOT_ADVANCED);
        await db.baseDirInitPromise;
        await fs.access(TEST_DB_ROOT_ADVANCED);
        console.log("--- DEBUG: DB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ---");
    });
    
    if (!db || failedTests > 0) {
        console.error("\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DB. –¢–µ—Å—Ç—ã upsert –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.");
        // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å - –ø–æ—á–µ–º—É –Ω–µ –¥–æ—à–ª–∏ –¥–æ upsert
        console.log('\n\n--- –ò—Ç–æ–≥–∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¢–µ—Å—Ç–æ–≤ ---');
        console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: ${totalTests}`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests > 0 ? failedTests : 1}`); // –ï—Å–ª–∏ —É–ø–∞–ª–∏ –∑–¥–µ—Å—å, —Å—á–∏—Ç–∞–µ–º 1 –ø—Ä–æ–≤–∞–ª
        if (failedTests > 0 || totalTests === 0) { // –î–æ–±–∞–≤–∏–ª totalTests === 0
            failedTestDetails.forEach(fail => {
                console.error(`\n  –û–ø–∏—Å–∞–Ω–∏–µ: ${fail.description}\n  –û—à–∏–±–∫–∞: ${fail.error}`);
            });
             if(failedTestDetails.length === 0 && totalTests === 0) { // –ï—Å–ª–∏ –¥–∞–∂–µ –ø–µ—Ä–≤—ã–π it –Ω–µ –ø—Ä–æ—à–µ–ª
                console.error("\n  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DB –¥–ª—è —Ç–µ—Å—Ç–æ–≤.");
            }
        }
        return;
    }

    // ====================================================================================
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ `upsert()` - –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–´–ô –ë–õ–û–ö
    // ====================================================================================
    await describe('–ú–µ—Ç–æ–¥ upsert() –≤ Collection', async () => {
        console.log("--- DEBUG UPSERT: –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ describe('–ú–µ—Ç–æ–¥ upsert()') ---");
        const upsertCollection = await db.collection('upsert_items_isolated_test');
        console.log("--- DEBUG UPSERT: –ö–æ–ª–ª–µ–∫—Ü–∏—è 'upsert_items_isolated_test' –ø–æ–ª—É—á–µ–Ω–∞ ---");

        await it('–¥–æ–ª–∂–µ–Ω –≤—Å—Ç–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (query-–æ–±—ä–µ–∫—Ç)', async () => {
            console.log("---- DEBUG UPSERT it_insert_query_obj: –ù–∞—á–∞–ª–æ");
            const result = await upsertCollection.upsert(
                { email: 'upsert_new@example.com' }, 
                { name: 'Upsert New User', status: 'active' } 
            );
            console.log("---- DEBUG UPSERT it_insert_query_obj: upsert –≤—ã–ø–æ–ª–Ω–µ–Ω, result.operation:", result ? result.operation : 'null_result', "docId:", result && result.document ? result.document._id : 'N/A');
            assert.strictEqual(result.operation, 'inserted', '–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "inserted"');
            assert(result.document && result.document._id, '–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω –∏ –∏–º–µ—Ç—å _id');
            assert.strictEqual(result.document.email, 'upsert_new@example.com', '–ü–æ–ª–µ –∏–∑ query –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ');
            assert.strictEqual(result.document.name, 'Upsert New User');
            console.log("---- DEBUG UPSERT it_insert_query_obj: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
        });

        let existingUserId;
        await it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω (query-–æ–±—ä–µ–∫—Ç)', async () => {
            console.log("---- DEBUG UPSERT it_update_query_obj: –ù–∞—á–∞–ª–æ");
            // –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤–∏–º –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤ —ç—Ç–æ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ç–µ—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ—á–∏—â–∞–µ—Ç
            const preInsert = await upsertCollection.insert({ email: 'upsert_existing_for_update@example.com', name: 'Upsert Existing User', initialValue: 10 });
            existingUserId = preInsert._id;
            console.log("---- DEBUG UPSERT it_update_query_obj: preInsert –≤—ã–ø–æ–ª–Ω–µ–Ω, ID:", existingUserId);

            const result = await upsertCollection.upsert(
                { email: 'upsert_existing_for_update@example.com' }, 
                { status: 'inactive_upsert', age: 31 }
            );
            console.log("---- DEBUG UPSERT it_update_query_obj: upsert –≤—ã–ø–æ–ª–Ω–µ–Ω, result.operation:", result ? result.operation : 'null_result', "docId:", result && result.document ? result.document._id : 'N/A');
            assert.strictEqual(result.operation, 'updated', '–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "updated"');
            assert(result.document, '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω');
            assert.strictEqual(result.document._id, existingUserId, '_id –Ω–µ –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è');
            assert.strictEqual(result.document.email, 'upsert_existing_for_update@example.com');
            assert.strictEqual(result.document.name, 'Upsert Existing User', '–ù–µ–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è');
            assert.strictEqual(result.document.status, 'inactive_upsert', '–ü–æ–ª–µ status –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è');
            assert.strictEqual(result.document.age, 31, '–ù–æ–≤–æ–µ –ø–æ–ª–µ age –¥–æ–ª–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å—Å—è');
            console.log("---- DEBUG UPSERT it_update_query_obj: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
        });

        await it('–¥–æ–ª–∂–µ–Ω –≤—Å—Ç–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (query-—Ñ—É–Ω–∫—Ü–∏—è)', async () => {
            console.log("---- DEBUG UPSERT it_insert_query_fn: –ù–∞—á–∞–ª–æ");
            const result = await upsertCollection.upsert(
                doc => doc.username === 'upsertUserFuncToInsert', // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
                { username: 'upsertUserFuncToInsert', role: 'editor_upsert_fn' }
            );
            console.log("---- DEBUG UPSERT it_insert_query_fn: upsert –≤—ã–ø–æ–ª–Ω–µ–Ω, result.operation:", result ? result.operation : 'null_result', "docId:", result && result.document ? result.document._id : 'N/A');
            assert.strictEqual(result.operation, 'inserted');
            assert(result.document && result.document.username === 'upsertUserFuncToInsert');
            assert.strictEqual(result.document.role, 'editor_upsert_fn');
            console.log("---- DEBUG UPSERT it_insert_query_fn: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
        });
        
        await it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω (query-—Ñ—É–Ω–∫—Ü–∏—è)', async () => {
            console.log("---- DEBUG UPSERT it_update_query_fn: –ù–∞—á–∞–ª–æ");
            // –í—Å—Ç–∞–≤–∏–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            let userToUpdate = await upsertCollection.findOne(doc => doc.username === 'upsertUserFuncToUpdate');
            if (!userToUpdate) {
                userToUpdate = await upsertCollection.insert({ username: 'upsertUserFuncToUpdate', role: 'initial_role_fn_update' });
            }
            assert(userToUpdate, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (query-fn) –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");
            console.log("---- DEBUG UPSERT it_update_query_fn: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω/—Å–æ–∑–¥–∞–Ω, ID:", userToUpdate._id);

            const result = await upsertCollection.upsert(
                doc => doc.username === 'upsertUserFuncToUpdate',
                { role: 'admin_upsert_fn', lastLogin: new Date().toISOString() }
            );
            console.log("---- DEBUG UPSERT it_update_query_fn: upsert –≤—ã–ø–æ–ª–Ω–µ–Ω, result.operation:", result ? result.operation : 'null_result', "docId:", result && result.document ? result.document._id : 'N/A');
            assert.strictEqual(result.operation, 'updated');
            assert.strictEqual(result.document._id, userToUpdate._id);
            assert.strictEqual(result.document.role, 'admin_upsert_fn');
            assert(result.document.lastLogin, 'lastLogin –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω');
            console.log("---- DEBUG UPSERT it_update_query_fn: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
        });

        await it('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å setOnInsert –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', async () => {
            console.log("---- DEBUG UPSERT it_set_on_insert: –ù–∞—á–∞–ª–æ");
            const upsertOptions = { setOnInsert: { initialPoints: 101, source: 'upsert_test_soi_isolated' } };
            
            console.log("---- DEBUG UPSERT it_set_on_insert: –ü–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –≤—Å—Ç–∞–≤–∫–æ–π (key1_soi_isolated)");
            const insertResult = await upsertCollection.upsert(
                { uniqueKey: 'key1_soi_isolated' },
                { value: 'AAA' },
                upsertOptions
            );
            console.log("---- DEBUG UPSERT it_set_on_insert: –ü–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, result.operation:", insertResult ? insertResult.operation : 'null_result', "docId:", insertResult && insertResult.document ? insertResult.document._id : 'N/A');
            assert.strictEqual(insertResult.operation, 'inserted');
            assert.strictEqual(insertResult.document.initialPoints, 101);
            const insertedDocId = insertResult.document._id;

            console.log("---- DEBUG UPSERT it_set_on_insert: –ü–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (key1_soi_isolated)");
            const updateResult = await upsertCollection.upsert(
                { uniqueKey: 'key1_soi_isolated' },
                { value: 'BBB' },
                upsertOptions
            );
            console.log("---- DEBUG UPSERT it_set_on_insert: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, result.operation:", updateResult ? updateResult.operation : 'null_result', "docId:", updateResult && updateResult.document ? updateResult.document._id : 'N/A');
            assert.strictEqual(updateResult.operation, 'updated');
            assert.strictEqual(updateResult.document._id, insertedDocId);
            assert.strictEqual(updateResult.document.value, 'BBB');
            assert.strictEqual(updateResult.document.initialPoints, 101, 'setOnInsert –ø–æ–ª–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ update');
            console.log("---- DEBUG UPSERT it_set_on_insert: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ");
        });
        console.log("--- DEBUG UPSERT: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ describe('–ú–µ—Ç–æ–¥ upsert()') ---");
    });

    // --- –û—Å—Ç–∞–ª—å–Ω—ã–µ describe –±–ª–æ–∫–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã ---
    /*
    await describe('–ì–∏–±–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID (idGenerator)', async () => { ... });
    await describe('–ú–µ—Ç–æ–¥ count() –≤ Collection', async () => { ... });
    await describe('–•—É–∫–∏/–°–æ–±—ã—Ç–∏—è –≤ Collection', async () => { ... });
    await describe('–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤', async () => { ... }); // –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—â–µ–π
    await describe('–û—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ (Write Queue)', async () => { ... });
    await describe('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏', async () => { ... });
    */

    // --- –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ ---
    console.log('\n\n--- –ò—Ç–æ–≥–∏ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¢–µ—Å—Ç–æ–≤ ---');
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: ${totalTests}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`);

    if (failedTests > 0) {
        console.error('\nüî•üî•üî• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´! üî•üî•üî•');
        failedTestDetails.forEach(fail => {
            console.error(`\n  –û–ø–∏—Å–∞–Ω–∏–µ: ${fail.description}`);
            console.error(`  –û—à–∏–±–∫–∞: ${fail.error}`);
            if (fail.stack) {
                // console.error(`  –°—Ç–µ–∫:\n${fail.stack}`);
            }
        });
    } else if (totalTests > 0) { // –í—ã–≤–æ–¥–∏–º —É—Å–ø–µ—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã —Ç–µ—Å—Ç—ã
        console.log('\nüéâüéâüéâ –í–°–ï (–ó–ê–ü–£–©–ï–ù–ù–´–ï) –†–ê–°–®–ò–†–ï–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâüéâüéâ');
    } else {
        console.warn("\n‚ö†Ô∏è –ù–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–∫—Ä–æ–º–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏).");
    }
}

// –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
runAdvancedTests().catch(err => {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ù–ï –¢–ï–°–¢–û–í–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø:", err);
    failedTests++; 
}).finally(() => {
    if (totalTests === 0 && passedTests === 0 && failedTests === 0 && !db) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ db –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
        console.error("–¢–µ—Å—Ç—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –Ω–∞ —Å–∞–º–æ–º —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ (–¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DB).");
    }
});