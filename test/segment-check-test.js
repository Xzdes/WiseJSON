// test/segment-check-test.js

const fs = require('fs/promises');
const path = require('path');
const assert = require('assert');
const WiseJSON = require('../wise-json/index.js');

const TEST_DIR = path.join(__dirname, 'segment_test_db');
const COLLECTION_NAME = 'segmentTest';

async function runSegmentTest() {
    console.log('\nüì¶ [SEGMENT TEST] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è...\n');

    await fs.rm(TEST_DIR, { recursive: true, force: true }).catch(() => {});

    const db = new WiseJSON(TEST_DIR, {
        maxSegmentSizeBytes: 512, // –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
        checkpointIntervalMs: 0,
        maxWalEntriesBeforeCheckpoint: 0,
        checkpointsToKeep: 5,
        walForceSync: false,
    });

    const collection = await db.collection(COLLECTION_NAME);

    const totalDocs = 25;
    const baseDoc = {
        type: 'log',
        text: 'a'.repeat(100), // –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ~100+ –±–∞–π—Ç
        timestamp: new Date().toISOString(),
    };

    console.log(`üìù –í—Å—Ç–∞–≤–∫–∞ ${totalDocs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...`);
    for (let i = 0; i < totalDocs; i++) {
        await collection.insert({ ...baseDoc, index: i });
    }

    const count = await collection.count();
    assert.strictEqual(count, totalDocs, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å');

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç...');
    await collection.flushToDisk();

    const checkpointsPath = path.join(TEST_DIR, COLLECTION_NAME, '_checkpoints');
    const files = await fs.readdir(checkpointsPath);

    const meta = files.filter(f => f.startsWith('checkpoint_meta')).length;
    const segments = files.filter(f => f.startsWith('checkpoint_data')).length;

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    console.log(`  - –ú–µ—Ç–∞—Ñ–∞–π–ª–æ–≤: ${meta}`);
    console.log(`  - –°–µ–≥–º–µ–Ω—Ç–æ–≤: ${segments}`);
    assert.ok(segments >= 2, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –º–∞–ª–æ–º maxSegmentSizeBytes');

    console.log('üìå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ _checkpoints:');
    files.forEach(f => console.log(` - ${f}`));

    await db.close();
    console.log('\n‚úÖ –¢–µ—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ.\n');
}

runSegmentTest().catch(err => {
    console.error('\nüî• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤!');
    console.error(err);
    process.exit(1);
});
