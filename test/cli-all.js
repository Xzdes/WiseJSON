// test/cli-unified-all.js

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');
const assert = require('assert');

// 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const DB_PATH = path.resolve(__dirname, 'cli-unified-db');
const CLI_PATH = `node ${path.resolve(__dirname, '../cli/index.js')}`;
const TEST_COLLECTION = 'unified_users';
const DATA_FILE_PATH = path.join(__dirname, 'cliapi-import.json'); // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const EXPORT_JSON_PATH = path.join(__dirname, 'cli-unified-export.json'); // –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

// 2. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
function cleanUp() {
    // –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ë–î
    if (fs.existsSync(DB_PATH)) {
        fs.rmSync(DB_PATH, { recursive: true, force: true });
    }
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞
    if (fs.existsSync(EXPORT_JSON_PATH)) {
        fs.unlinkSync(EXPORT_JSON_PATH);
    }
    // *** –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–û–ë–ê–í–õ–Ø–ï–ú –£–î–ê–õ–ï–ù–ò–ï –§–ê–ô–õ–ê –ò–ú–ü–û–†–¢–ê ***
    if (fs.existsSync(DATA_FILE_PATH)) {
        fs.unlinkSync(DATA_FILE_PATH);
    }
}

// 3. –ì–ª–∞–≤–Ω–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ CLI
function runCli(command, options = {}) {
    // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const env = { ...process.env, WISE_JSON_PATH: DB_PATH, LOG_LEVEL: 'none' };
    const fullCommand = `${CLI_PATH} ${command}`;
    try {
        const stdout = execSync(fullCommand, { env, stdio: 'pipe' }).toString();
        if (options.shouldFail) {
            assert.fail(`Command "${command}" should have failed but it succeeded.`);
        }
        return stdout.trim();
    } catch (error) {
        if (!options.shouldFail) {
            const stderr = error.stderr ? error.stderr.toString() : '';
            console.error(`Command failed unexpectedly: ${fullCommand}\nStderr: ${stderr}`);
            throw error;
        }
        return error.stderr ? error.stderr.toString().trim() : '';
    }
}

async function main() {
    console.log('=== UNIFIED CLI ALL TEST START ===');
    // –í—ã–∑—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—É—Å–∫ —É–ø–∞–ª
    cleanUp();

    try {
        // --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ---
        const testUsers = Array.from({ length: 10 }, (_, i) => ({
            _id: `user${i}`,
            name: `User ${i}`,
            age: 20 + i,
            city: i % 2 === 0 ? 'New York' : 'London',
            tags: [`tag${i}`]
        }));
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        fs.writeFileSync(DATA_FILE_PATH, JSON.stringify(testUsers));

        // --- –¢–µ—Å—Ç 1: –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–ø–∏—Å–∏ ---
        console.log('  --- Testing write protection ---');
        runCli(`create-index ${TEST_COLLECTION} name`, { shouldFail: true });
        console.log('  --- Write protection PASSED ---');

        // --- –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è ---
        console.log('  --- Testing basic write/read operations ---');
        runCli(`import-collection ${TEST_COLLECTION} ${DATA_FILE_PATH} --allow-write`);
        
        const collectionsOutput = runCli(`list-collections`);
        assert.ok(collectionsOutput.includes(TEST_COLLECTION), 'list-collections should show the new collection');
        
        const docsOutput = runCli(`show-collection ${TEST_COLLECTION}`);
        const docs = JSON.parse(docsOutput);
        assert.strictEqual(docs.length, 10, 'show-collection should return 10 documents');
        
        const singleDoc = JSON.parse(runCli(`get-document ${TEST_COLLECTION} user3`));
        assert.strictEqual(singleDoc.name, 'User 3', 'get-document should retrieve the correct document');
        console.log('  --- Basic write/read operations PASSED ---');

        // --- –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ–ø—Ü–∏–∏ ---
        console.log('  --- Testing filtering and options ---');
        
        const filterObject = { city: 'New York' };
        let filterArgument;

        if (os.platform() === 'win32') {
            const escapedJson = JSON.stringify(filterObject).replace(/"/g, '\\"');
            filterArgument = `"${escapedJson}"`;
        } else {
            filterArgument = `'${JSON.stringify(filterObject)}'`;
        }
        
        const filteredDocsOutput = runCli(`show-collection ${TEST_COLLECTION} --filter=${filterArgument}`);
        
        const filteredDocs = JSON.parse(filteredDocsOutput);
        assert.strictEqual(filteredDocs.length, 5, 'Filtering by city should return 5 documents');
        assert.ok(filteredDocs.every(d => d.city === 'New York'), 'All filtered docs should be from New York');

        const limitedOutput = runCli(`show-collection ${TEST_COLLECTION} --limit=3`);
        assert.strictEqual(JSON.parse(limitedOutput).length, 3, 'Limit option should work');
        console.log('  --- Filtering and options PASSED ---');

        // --- –¢–µ—Å—Ç 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞–º–∏ ---
        console.log('  --- Testing index management ---');
        runCli(`create-index ${TEST_COLLECTION} name --unique --allow-write`);
        const indexes = JSON.parse(runCli(`list-indexes ${TEST_COLLECTION}`));
        assert.ok(indexes.some(idx => idx.fieldName === 'name' && idx.type === 'unique'), 'Index should be created');
        
        runCli(`drop-index ${TEST_COLLECTION} name --allow-write`);
        const indexesAfterDrop = JSON.parse(runCli(`list-indexes ${TEST_COLLECTION}`));
        assert.strictEqual(indexesAfterDrop.length, 0, 'Index should be dropped');
        console.log('  --- Index management PASSED ---');

        // --- –¢–µ—Å—Ç 5: –û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ñ–ª–∞–≥ --force ---
        console.log('  --- Testing dangerous operations ---');
        runCli(`collection-drop ${TEST_COLLECTION} --allow-write`, { shouldFail: true });

        runCli(`collection-drop ${TEST_COLLECTION} --allow-write --force`);
        const collectionsAfterDrop = runCli('list-collections');
        assert.ok(!collectionsAfterDrop.includes(TEST_COLLECTION), 'Collection should be dropped with --force');
        console.log('  --- Dangerous operations PASSED ---');
        
    } finally {
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–ø–∞–ª–∏
        cleanUp();
    }

    console.log('=== UNIFIED CLI ALL TEST PASSED SUCCESSFULLY ===');
}

main().catch(err => {
    console.error('\nüî• UNIFIED CLI TEST FAILED:', err);
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏
    cleanUp();
    process.exit(1);
});