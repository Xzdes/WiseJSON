// test/db-unique-index-all.js

const path = require('path');
const fs = require('fs');
const assert = require('assert');
const WiseJSON = require('../wise-json/index.js');

const DB_PATH = path.resolve(__dirname, 'db-unique-index-all');
const COL = 'uniq_test';

function cleanUp() {
    if (fs.existsSync(DB_PATH)) fs.rmSync(DB_PATH, { recursive: true, force: true });
}

async function main() {
    console.log('=== DB UNIQUE INDEX ALL TEST START ===');
    cleanUp();

    const db = new WiseJSON(DB_PATH);
    const col = await db.collection(COL);
    await col.initPromise;

    // 1. –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    await col.createIndex('email', { unique: true });

    // 2. –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    await col.insert({ email: 'u1@mail.com', name: 'User1' });
    assert.strictEqual(await col.count(), 1, 'Insert first');

    // 3. –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Å —Ç–∞–∫–∏–º –∂–µ email ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!
    let dupError = false;
    try {
        await col.insert({ email: 'u1@mail.com', name: 'User2' });
    } catch (e) {
        dupError = true;
    }
    assert(dupError, 'Duplicate insert throws');

    // 4. Batch insert —Å –æ–¥–Ω–∏–º –¥—É–±–ª–∏–∫–∞—Ç–æ–º ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
    let batchError = false;
    try {
        await col.insertMany([
            { email: 'u2@mail.com', name: 'User2' },
            { email: 'u1@mail.com', name: 'User3' }
        ]);
    } catch (e) {
        batchError = true;
    }
    assert(batchError, 'Batch insert with duplicate throws');

    // 5. Batch insert –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ‚Äî –ø—Ä–æ—Ö–æ–¥–∏—Ç
    await col.insertMany([
        { email: 'u2@mail.com', name: 'User2' },
        { email: 'u3@mail.com', name: 'User3' }
    ]);
    assert.strictEqual(await col.count(), 3, 'Batch insert OK');

    // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å email –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ‚Äî –æ—à–∏–±–∫–∞
    let updateError = false;
    try {
        await col.updateMany(d => d.name === 'User3', { email: 'u2@mail.com' });
    } catch (e) {
        updateError = true;
    }
    assert(updateError, 'Update duplicate throws');

    // 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ ‚Äî –ø—Ä–æ—Ö–æ–¥–∏—Ç
    await col.updateMany(d => d.name === 'User3', { email: 'u4@mail.com' });
    const byEmail = await col.findByIndexedValue('email', 'u4@mail.com');
    assert(byEmail.length === 1 && byEmail[0].name === 'User3', 'Update unique ok');

    await db.close();
    cleanUp();

    console.log('=== DB UNIQUE INDEX ALL TEST PASSED ===');
}

main().catch(err => {
    console.error('\nüî• TEST FAILED:', err);
    console.error(`\n‚ùó –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è/—Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏: ${DB_PATH}`);
    process.exit(1);
});
