// test/db-queries-all.js

const path = require('path');
const fs = require('fs');
const assert = require('assert');
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—É—Ç—å —Ç–µ–ø–µ—Ä—å –∏–¥–µ—Ç –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞.
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Ç–µ—Å—Ç—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.
const WiseJSON = require('../wise-json/index.js'); 

const DB_PATH = path.resolve(__dirname, 'db-queries-all');
const COLLECTION_NAME = 'query_tests_col';

function cleanUp() {
    if (fs.existsSync(DB_PATH)) {
        fs.rmSync(DB_PATH, { recursive: true, force: true });
    }
}

async function main() {
    console.log('=== DB QUERIES ALL TEST START ===');
    cleanUp();

    const db = new WiseJSON(DB_PATH);
    await db.init();
    const col = await db.collection(COLLECTION_NAME);
    await col.initPromise;

    const testData = [
        { name: 'Alice', age: 30, city: 'New York', tags: ['dev', 'js'], active: true },
        { name: 'Bob', age: 25, city: 'London', tags: ['qa', 'python'], active: false },
        { name: 'Charlie', age: 35, city: 'New York', tags: ['dev', 'go'], active: true },
        { name: 'Diana', age: 30, city: 'Paris', tags: ['pm'], active: true },
        { name: 'Edward', age: 40, city: 'London', tags: ['devops', 'aws'], active: false, salary: 120000 }
    ];

    await col.insertMany(testData);

    console.log('  --- Running tests with function predicates (backwards compatibility) ---');
    let results = await col.find(doc => doc.age === 30);
    assert.strictEqual(results.length, 2, 'Function find: age === 30 should return 2 docs');
    let singleResult = await col.findOne(doc => doc.city === 'Paris');
    assert.strictEqual(singleResult.name, 'Diana', 'Function findOne: city === "Paris" should find Diana');
    console.log('  --- Function predicate tests PASSED ---');


    console.log('  --- Running tests with object filters (new functionality) ---');
    // 1. –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
    results = await col.find({ city: 'London' });
    assert.strictEqual(results.length, 2, 'Object find: city "London" should return 2 docs');

    // 2. –û–ø–µ—Ä–∞—Ç–æ—Ä $gt (–±–æ–ª—å—à–µ —á–µ–º)
    results = await col.find({ age: { '$gt': 30 } });
    assert.strictEqual(results.length, 2, 'Object find: age > 30 should return 2 docs (Charlie, Edward)');
    assert(results.every(d => d.age > 30), 'All found docs should have age > 30');

    // 3. –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ($gte –∏ $lt)
    results = await col.find({ age: { '$gte': 25, '$lt': 35 } });
    assert.strictEqual(results.length, 3, 'Object find: 25 <= age < 35 should return 3 docs (Alice, Bob, Diana)');

    // 4. –û–ø–µ—Ä–∞—Ç–æ—Ä $in
    results = await col.find({ city: { '$in': ['Paris', 'London'] } });
    assert.strictEqual(results.length, 3, 'Object find: city in [Paris, London] should return 3 docs');

    // 5. –û–ø–µ—Ä–∞—Ç–æ—Ä $exists
    results = await col.find({ salary: { '$exists': true } });
    assert.strictEqual(results.length, 1, 'Object find: salary exists should return 1 doc (Edward)');
    results = await col.find({ salary: { '$exists': false } });
    assert.strictEqual(results.length, 4, 'Object find: salary does not exist should return 4 docs');

    // 6. findOne —Å –æ–±—ä–µ–∫—Ç–æ–º
    singleResult = await col.findOne({ name: 'Alice' });
    assert.strictEqual(singleResult.age, 30, 'Object findOne: should find Alice');
    singleResult = await col.findOne({ name: 'Zoe' });
    assert.strictEqual(singleResult, null, 'Object findOne: should return null for non-existent doc');

    // 7. –õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä $or
    results = await col.find({ '$or': [{ city: 'Paris' }, { age: 40 }] });
    assert.strictEqual(results.length, 2, 'Object find: $or city is Paris or age is 40 should return 2 docs');
    assert(results.some(d => d.name === 'Diana') && results.some(d => d.name === 'Edward'), '$or result should contain Diana and Edward');

    // 8. –õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä $and
    results = await col.find({ '$and': [{ city: 'New York' }, { active: true }] });
    assert.strictEqual(results.length, 2, 'Object find: $and city is New York and active is true should return 2 docs (Alice, Charlie)');

    // 9. –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    results = await col.find({
        age: { '$gte': 30 },
        '$or': [
            { city: 'New York' },
            { tags: { '$in': ['pm'] } }
        ]
    });
    // –î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å: Alice (30, NY), Charlie (35, NY), Diana (30, Paris, pm)
    assert.strictEqual(results.length, 3, 'Complex query should return 3 docs');
    console.log('  --- Object filter tests PASSED ---');


    console.log('  --- Running tests for index usage with object filters ---');
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ
    await col.createIndex('city');
    await col.createIndex('name', { unique: true });

    // Spy –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –æ–Ω
    let findByIdsByIndexCalled = false;
    const originalFindIdsByIndex = col._indexManager.findIdsByIndex;
    col._indexManager.findIdsByIndex = function(...args) {
        findByIdsByIndexCalled = true;
        return originalFindIdsByIndex.apply(this, args);
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ—á–Ω–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—é
    results = await col.find({ city: 'New York' });
    assert.strictEqual(results.length, 2, 'Index find: should find 2 docs for New York');
    assert.ok(findByIdsByIndexCalled, 'Index find: findIdsByIndex method should have been called for city query');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    findByIdsByIndexCalled = false;
    
    // –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å 'city', —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä $in
    results = await col.find({ city: { '$in': ['Paris', 'London'] } });
    assert.strictEqual(findByIdsByIndexCalled, false, 'Index find: index should not be used for $in operator in this simple optimization');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –º–µ—Å—Ç–æ
    col._indexManager.findIdsByIndex = originalFindIdsByIndex;

    console.log('  --- Index usage tests PASSED ---');

    await db.close();
    cleanUp();

    console.log('=== DB QUERIES ALL TEST PASSED SUCCESSFULLY ===');
}

main().catch(err => {
    console.error('\nüî• TEST FAILED:', err);
    console.error(`\n‚ùó –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: ${DB_PATH}`);
    process.exit(1);
});