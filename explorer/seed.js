// explorer/seed.js
const path = require('path');
const fs = require('fs');
const WiseJSON = require('../wise-json/index.js');

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const DB_PATH = path.resolve(process.cwd(), 'wise-json-db-data');
const USER_COUNT = 150;
const ORDER_COUNT = 400;
const LOG_COUNT = 1000;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
const FIRST_NAMES = ['–ò–≤–∞–Ω', '–ü–µ—Ç—Ä', '–ê–ª–∏—Å–∞', '–ï–ª–µ–Ω–∞', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞—Ä–∏—è', '–°–µ—Ä–≥–µ–π', '–ê–Ω–Ω–∞'];
const LAST_NAMES = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–º–∏—Ä–Ω–æ–≤–∞', '–ü–æ–ø–æ–≤–∞', '–í–æ–ª–∫–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞', '–ó–∞–π—Ü–µ–≤'];
const CITIES = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–õ–æ–Ω–¥–æ–Ω'];
const TAGS = ['dev', 'qa', 'pm', 'design', 'js', 'python', 'go', 'devops', 'vip'];
const LOG_LEVELS = ['INFO', 'WARN', 'ERROR', 'DEBUG'];
const LOG_COMPONENTS = ['API', 'WebApp', 'PaymentGateway', 'AuthService'];
const ORDER_STATUSES = ['pending', 'shipped', 'delivered', 'cancelled'];
const PRODUCTS = [
    { name: '–ù–æ—É—Ç–±—É–∫ Pro', price: 120000 },
    { name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω X', price: 80000 },
    { name: '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏', price: 15000 },
    { name: '–£–º–Ω—ã–µ —á–∞—Å—ã', price: 25000 }
];

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
const getRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];
const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

// --- –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ---
async function seedDatabase() {
    console.log(`\nüå± –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤: ${DB_PATH}`);

    if (fs.existsSync(DB_PATH)) {
        console.log('   - –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        fs.rmSync(DB_PATH, { recursive: true, force: true });
    }
    
    const db = new WiseJSON(DB_PATH);
    await db.init();
    console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.');

    try {
        // --- 1. –ö–æ–ª–ª–µ–∫—Ü–∏—è Users ---
        console.log(`\nüë§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º ${USER_COUNT} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
        const usersCollection = await db.getCollection('users');
        await usersCollection.initPromise;

        const users = [];
        for (let i = 0; i < USER_COUNT; i++) {
            const user = {
                _id: `user_${i}`,
                name: `${getRandom(FIRST_NAMES)} ${getRandom(LAST_NAMES)}`,
                email: `user${i}@example.com`,
                age: getRandomInt(18, 65),
                city: getRandom(CITIES),
                tags: [getRandom(TAGS), getRandom(TAGS)].filter((v, i, a) => a.indexOf(v) === i), // 1-2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–∞
                active: Math.random() > 0.2, // 80% –∞–∫—Ç–∏–≤–Ω—ã—Ö
            };
            if (i % 10 === 0) { // –ö–∞–∂–¥—ã–π 10-–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                user.managerId = `user_${getRandomInt(0, USER_COUNT - 1)}`;
            }
            if (i % 25 === 0) { // –ö–∞–∂–¥—ã–π 25-–π –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å
                user.expireAt = Date.now() + 3600 * 1000;
            }
            users.push(user);
        }
        await usersCollection.insertMany(users);
        
        console.log('   - –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è "users"...');
        await usersCollection.createIndex('city');
        await usersCollection.createIndex('age');
        await usersCollection.createIndex('email', { unique: true });
        console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "users" —Å–æ–∑–¥–∞–Ω–∞ —Å ${await usersCollection.count()} –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.`);

        // --- 2. –ö–æ–ª–ª–µ–∫—Ü–∏—è Orders ---
        console.log(`\nüõí –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º ${ORDER_COUNT} –∑–∞–∫–∞–∑–æ–≤...`);
        const ordersCollection = await db.getCollection('orders');
        await ordersCollection.initPromise;
        
        const orders = [];
        for (let i = 0; i < ORDER_COUNT; i++) {
            const productCount = getRandomInt(1, 3);
            const orderProducts = Array.from({ length: productCount }, () => getRandom(PRODUCTS));
            orders.push({
                userId: `user_${getRandomInt(0, USER_COUNT - 1)}`,
                status: getRandom(ORDER_STATUSES),
                products: orderProducts,
                totalAmount: orderProducts.reduce((sum, p) => sum + p.price, 0),
                createdAt: new Date(Date.now() - getRandomInt(0, 30) * 86400000).toISOString(), // –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            });
        }
        await ordersCollection.insertMany(orders);

        console.log('   - –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è "orders"...');
        await ordersCollection.createIndex('userId');
        await ordersCollection.createIndex('status');
        console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "orders" —Å–æ–∑–¥–∞–Ω–∞ —Å ${await ordersCollection.count()} –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.`);

        // --- 3. –ö–æ–ª–ª–µ–∫—Ü–∏—è Logs ---
        console.log(`\nüìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º ${LOG_COUNT} –ª–æ–≥–æ–≤...`);
        const logsCollection = await db.getCollection('logs');
        await logsCollection.initPromise;

        const logs = [];
        for (let i = 0; i < LOG_COUNT; i++) {
            const log = {
                level: getRandom(LOG_LEVELS),
                component: getRandom(LOG_COMPONENTS),
                message: `Operation ${i} completed with status code ${getRandomInt(200, 500)}.`,
                timestamp: new Date(Date.now() - getRandomInt(0, 24 * 60) * 60000).toISOString(), // –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
            };
            if (log.level === 'DEBUG') { // Debug-–ª–æ–≥–∏ –∂–∏–≤—É—Ç 5 –º–∏–Ω—É—Ç
                log.ttl = 5 * 60 * 1000;
            }
            if (i % 5 === 0) { // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≥–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                log.userId = `user_${getRandomInt(0, USER_COUNT - 1)}`;
            }
            logs.push(log);
        }
        await logsCollection.insertMany(logs);

        console.log('   - –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è "logs"...');
        await logsCollection.createIndex('level');
        console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "logs" —Å–æ–∑–¥–∞–Ω–∞ —Å ${await logsCollection.count()} –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.`);

    } catch (error) {
        console.error('\nüî• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
        if (db) {
            console.log('\n- –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
            await db.close();
        }
    }

    console.log('\n‚ú® –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ‚ú®');
    console.log('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: node explorer/server.js');
}

seedDatabase();